public class Minimize Malware Spread {
    class Solution {
        int[] parent;
        int[] size;
        
        public int minMalwareSpread(int[][] graph, int[] initial) {
            parent=new int[graph.length];
            size=new int[graph.length];
            
              for(int i = 0; i < graph.length; i++){
                parent[i] = i;
                size[i] = 1;
            }
            
            for(int i=0;i<graph.length;i++){
                for(int j=0;j<graph.length;j++){
                    if(i!=j && graph[i][j]==1)
                        unionHelp(i,j);
                }
            }
            
           int[] cmap=new int[graph.length];
           for(int i:initial){
               int il=find(i);
               cmap[il]++;
           }
            
         Arrays.sort(initial);
            
            int mi = initial[0];
            int ms = 0;
            for(int i: initial){
                int ri = find(i);
                if(cmap[ri] == 1){
                    if(size[ri] > ms) {
                        mi = i;
                        ms = size[ri];
                    }
                }
            }
            return mi;
        }
        
        public int find(int x){
            if(parent[x]==x){
                return x;
            }
            else{
                parent[x]=find(parent[x]);
                return parent[x];
            }
        }
        
        public void unionHelp(int x,int y){
            int xl=find(x);
            int yl=find(y);
            
            if(size[xl]<size[yl]){
                parent[xl]=yl;
                size[yl]++;
            }
            else {
                parent[yl]=xl;
                size[xl]++;
            }
        }
        
        
    }
}
