public static class MinStack {
    Stack<Integer> data;
    int min;

    public MinStack() {
      data = new Stack<>();
    }

    int size() {
      // write your code here
      return data.size();
    }

    void push(int val) {
      // write your code here
      if(data.size()==0){
          data.push(val);
          min=val;
      }
      else if(val>=min){
        data.push(val);
      }
      else{
          //encode it and then store it-> (val+(val-min))
          //val will be min and it will get stored in min var
          data.push(val+(val-min));
          min=val;
          
      }
    }

    int pop() {
      // write your code here
       if(data.size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
      else if(data.peek()>=min){
          int v=data.pop();
        return v;
      }
      else{
          int vmin=min;
          min=(2*min-data.peek());
          data.pop();
          return vmin;
      }
    }

    int top() {
      // write your code here
      if(data.size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
      else if(data.peek()>=min){
        return data.peek();
      }
      else{
          return min;
      }
    }

    int min() {
      // write your code here
      return min;
    }
  }